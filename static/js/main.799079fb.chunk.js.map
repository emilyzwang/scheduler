{"version":3,"sources":["serviceWorker.js","Card.js","Calendar.js","Confirm.js","Dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","handleClick","bind","state","day","Date","date","getTime","time","this","setDate","toLocaleTimeString","to","className","tabIndex","onClick","React","Component","Calendar","handleDayClick","selectedDay","undefined","times","selected","setState","listTimes","timeList","push","onDayClick","selectedDays","toLocaleDateString","map","Confirm","toLocaleString","type","style","width","Dashboard","path","selectedDate","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.799079fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      day : new Date(this.props.date.getTime() + this.props.time.getTime())\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.setDate(this.state.day);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div>\r\n          {this.state.day.toLocaleTimeString()}\r\n        </div>\r\n        <Link to=\"/confirm\">\r\n          <div className=\"ui animated basic blue button\" tabIndex=\"0\" onClick={this.handleClick}>\r\n            <div className=\"visible content\">Confirm Time</div>\r\n            <div className=\"hidden content\">\r\n              <i className=\"right arrow icon\"></i>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport DayPicker from 'react-day-picker';\r\nimport Card from './Card';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './index.css';\r\n\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDayClick = this.handleDayClick.bind(this);\r\n    this.state = {\r\n      selectedDay: undefined,\r\n      times: []\r\n    };\r\n  }\r\n\r\n  handleDayClick(day, {selected }) {\r\n    if (selected) {\r\n      this.setState({ selectedDay: undefined });\r\n    } else {\r\n      this.setState({selectedDay: day});\r\n      this.props.setDate(day);\r\n      this.listTimes();\r\n    }\r\n  }\r\n\r\n  listTimes() {\r\n    var timeList = []\r\n    for (var time = 0; time <= 18000000; time += 1800000) {\r\n      timeList.push(new Date(time));\r\n    }\r\n\r\n    this.setState({ times : timeList });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div className=\"ui segment\">\r\n          <div className=\"ui two column very relaxed grid\">\r\n            <div className=\"column\">\r\n              <DayPicker\r\n                onDayClick={this.handleDayClick}\r\n                selectedDays={this.state.selectedDay}\r\n              />\r\n            </div>\r\n            <div className=\"column\">\r\n            {this.state.selectedDay ? (\r\n              <div>\r\n                <p>You clicked {this.state.selectedDay.toLocaleDateString()}</p>\r\n                <ul>\r\n                  {this.state.times.map((time) => (\r\n                    <Card time={time} date={this.state.selectedDay} setDate = {this.props.setDate} />\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            ) : (\r\n              <p>Please select a day.</p>\r\n            )}\r\n            </div>\r\n          </div>\r\n          <div className=\"ui vertical divider\">\r\n            <i className=\"right arrow icon\"></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Confirm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"ui centered raised card\">\r\n        <div className=\"center aligned content\">\r\n          <div className=\"header\">\r\n            <p>{this.props.date.toLocaleString()}</p><br/>\r\n          </div>\r\n          <div className=\"center aligned description\">\r\n            <div className=\"ui form\">\r\n              <div className=\"inline field\">\r\n                <label>Name:</label>\r\n                <input type=\"text\"/>\r\n              </div>\r\n              <div className=\"inline field\">\r\n                <label>Email:</label>\r\n                <input type=\"text\"/>\r\n              </div>\r\n              <div className=\"inline field\">\r\n                <label>Event:</label>\r\n                <input type=\"text\"/>\r\n              </div>\r\n              <div className=\"inline field\">\r\n                <label>Duration:</label>\r\n                <input type=\"number\" style={{ width: 110 }}/>\r\n                <p>&nbsp; minutes</p>\r\n              </div>\r\n              <div className=\"inline field\">\r\n                <label>Location:</label>\r\n                <input type=\"text\"/>\r\n              </div>\r\n              <br></br>\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"center aligned extra content\">\r\n            <Link to=\"/\">\r\n              <div className=\"ui animated basic red button\" tabIndex=\"0\" onClick={this.handleClick}>\r\n                <div className=\"visible content\">Cancel</div>\r\n                <div className=\"hidden content\">\r\n                  <i className=\"left arrow icon\"></i>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n            <div className=\"ui animated basic green button\" tabIndex=\"0\" onClick={this.handleClick}>\r\n              <div className=\"visible content\">Confirm</div>\r\n              <div className=\"hidden content\">\r\n                <i className=\"right arrow icon\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport DayPicker from 'react-day-picker';\r\nimport 'react-day-picker/lib/style.css';\r\nimport Calendar from './Calendar';\r\nimport Confirm from './Confirm';\r\nimport './index.css';\r\n\r\nexport default class Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setDate = this.setDate.bind(this);\r\n    this.state = {\r\n      date : new Date(),\r\n      time : new Date()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/confirm\">\r\n              <Confirm date = {this.state.date}/>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Calendar setDate = {this.setDate}/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  setDate(selectedDate) {\r\n    this.setState({date : selectedDate});\r\n  }\r\n\r\n\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Dashboard from './Dashboard';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}