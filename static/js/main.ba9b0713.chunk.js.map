{"version":3,"sources":["serviceWorker.js","Card.js","Calendar.js","Confirm.js","Dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","handleClick","bind","state","time","Date","date","getTime","this","setTime","toLocaleTimeString","to","className","tabIndex","onClick","React","Component","Calendar","handleDayClick","selectedDay","undefined","times","day","selected","setState","setDate","listTimes","timeList","push","onDayClick","selectedDays","toLocaleDateString","map","Confirm","submit","setEvent","name","email","event","duration","alert","e","target","value","console","log","toLocaleString","type","onChange","Dashboard","path","selectedDate","selectedTime","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yFCfeC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,MAAQ,CACXC,KAAO,IAAIC,KAAK,EAAKL,MAAMM,KAAKC,UAAY,EAAKP,MAAMI,KAAKG,YAJ7C,E,2EASjBC,KAAKR,MAAMS,QAAQD,KAAKR,MAAMI,Q,+BAI9B,OACE,6BACE,6BACGI,KAAKL,MAAMC,KAAKM,sBAEnB,kBAAC,IAAD,CAAMC,GAAG,sBACP,yBAAKC,UAAU,gCAAgCC,SAAS,IAAIC,QAASN,KAAKP,aACxE,yBAAKW,UAAU,mBAAf,gBACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,6B,GAvBOG,IAAMC,WCGnBC,E,YACnB,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,eAAiB,EAAKA,eAAehB,KAApB,gBACtB,EAAKC,MAAQ,CACXgB,iBAAaC,EACbC,MAAO,IALQ,E,4EASJC,E,GAAmB,EAAZC,UAElBf,KAAKgB,SAAS,CAAEL,iBAAaC,IAC7BZ,KAAKR,MAAMyB,aAAQL,KAEnBZ,KAAKgB,SAAS,CAACL,YAAaG,IAC5Bd,KAAKR,MAAMyB,QAAQH,GACnBd,KAAKkB,e,kCAMP,IADA,IAAIC,EAAW,GACNvB,EAAO,EAAGA,GAAQ,MAAUA,GAAQ,KAC3CuB,EAASC,KAAK,IAAIvB,KAAKD,IAGzBI,KAAKgB,SAAS,CAAEH,MAAQM,M,+BAGhB,IAAD,OACP,OACE,6BACE,yBAAKf,UAAU,cACb,yBAAKA,UAAU,0DACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CACEiB,WAAYrB,KAAKU,eACjBY,aAActB,KAAKL,MAAMgB,eAG7B,yBAAKP,UAAU,UACZJ,KAAKL,MAAMgB,YACV,6BACE,2CAAiBX,KAAKL,MAAMgB,YAAYY,sBACxC,4BACGvB,KAAKL,MAAMkB,MAAMW,KAAI,SAAC5B,GAAD,OACpB,kBAAC,EAAD,CAAMA,KAAQA,EAAME,KAAQ,EAAKH,MAAMgB,YAAaV,QAAW,EAAKT,MAAMS,eAKhF,oDAGJ,yBAAKG,UAAU,uBACb,uBAAGA,UAAU,uBAGjB,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CACEiB,WAAYrB,KAAKU,eACjBY,aAActB,KAAKL,MAAMgB,eAG7B,yBAAKP,UAAU,yBACZJ,KAAKL,MAAMgB,YACV,6BACE,2CAAiBX,KAAKL,MAAMgB,YAAYY,sBAAyB,6BACjE,yBAAKnB,UAAU,0BACZJ,KAAKL,MAAMkB,MAAMW,KAAI,SAAC5B,GAAD,OACpB,kBAAC,EAAD,CAAMA,KAAQA,EAAME,KAAQ,EAAKH,MAAMgB,YAAaV,QAAW,EAAKT,MAAMS,cAExE,6BAAK,8BAGb,6BAAK,mDAA2B,sC,GA7EVM,IAAMC,WCHvBiB,E,YACnB,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KACDkC,OAAS,EAAKA,OAAOhC,KAAZ,gBACd,EAAKiC,SAAW,EAAKA,SAASjC,KAAd,gBAChB,EAAKC,MAAQ,CACXiC,UAAMhB,EACNiB,WAAOjB,EACPkB,WAAOlB,EACPmB,cAAUnB,EACVxB,cAAUwB,GAER,EAAKpB,MAAMM,OACb,EAAKH,MAAQ,CACXG,KAAO,IAAID,KAAK,EAAKL,MAAMM,KAAKC,UAAY,EAAKP,MAAMI,KAAKG,aAb/C,E,sEAmBbC,KAAKL,MAAMmC,OACbE,MAAM,UAAYhC,KAAKL,MAAMmC,MAAQ,a,+BAIhCG,GACPjC,KAAKgB,SAAS,CAAEc,MAAOG,EAAEC,OAAOC,QAChCC,QAAQC,IAAIrC,KAAKL,MAAMmC,S,+BAIvB,OACE,6BACG9B,KAAKR,MAAMM,KACV,yBAAKM,UAAU,2BACb,yBAAKA,UAAU,0BACb,6BACA,yBAAKA,UAAU,UACb,2BAAIJ,KAAKL,MAAMG,KAAKwC,kBAAqB,8BAE3C,yBAAKlC,UAAU,8BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,0BACb,2BAAOA,UAAU,YAAjB,SACA,2BAAOmC,KAAK,UAEd,6BACA,yBAAKnC,UAAU,0BACb,2BAAOA,UAAU,YAAjB,UACA,2BAAOmC,KAAK,UAEd,6BACA,yBAAKnC,UAAU,0BACb,2BAAOA,UAAU,YAAjB,UACA,2BAAOmC,KAAK,OAAOC,SAAWxC,KAAK2B,YAErC,6BACA,yBAAKvB,UAAU,gCACb,2BAAOA,UAAU,YAAjB,aACA,2BAAOmC,KAAK,WACZ,yBAAKnC,UAAU,kBAAf,YAIF,6BACA,yBAAKA,UAAU,0BACb,2BAAOA,UAAU,YAAjB,aACA,2BAAOmC,KAAK,UAEd,6BAAK,+BAIT,yBAAKnC,UAAU,gCACb,kBAAC,IAAD,CAAMD,GAAG,cACP,yBAAKC,UAAU,+BAA+BC,SAAS,KACrD,yBAAKD,UAAU,mBAAf,UACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,uBAInB,yBAAKA,UAAU,iCAAiCC,SAAS,IAAIC,QAASN,KAAK0B,QACzE,yBAAKtB,UAAU,mBAAf,WACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,wBAInB,+BAIJ,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,0BACb,mDACA,kBAAC,IAAD,CAAMD,GAAG,cACP,yBAAKC,UAAU,+BAA+BC,SAAS,KACrD,yBAAKD,UAAU,mBAAf,sBACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,8B,GApGIG,IAAMC,WCQtBiC,E,YACnB,WAAYjD,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,QAAU,EAAKA,QAAQvB,KAAb,gBACf,EAAKO,QAAU,EAAKA,QAAQP,KAAb,gBACf,EAAKC,MAAQ,CACXG,UAAOc,EACPhB,UAAOgB,GANQ,E,sEAYjB,OACE,kBAAC,IAAD,KACE,6BAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,sBACV,kBAAC,EAAD,CAAS5C,KAAQE,KAAKL,MAAMG,KAAMF,KAAQI,KAAKL,MAAMC,QAEvD,kBAAC,IAAD,CAAO8C,KAAK,cACV,kBAAC,EAAD,CAAUzB,QAAWjB,KAAKiB,QAAShB,QAAWD,KAAKC,gB,8BAQvD0C,GACN3C,KAAKgB,SAAS,CAAClB,KAAO6C,M,8BAGhBC,GACN5C,KAAKgB,SAAS,CAACpB,KAAOgD,Q,GApCarC,IAAMC,WCL7CqC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SL2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba9b0713.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      time : new Date(this.props.date.getTime() + this.props.time.getTime())\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.setTime(this.props.time);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div>\r\n          {this.state.time.toLocaleTimeString()}\r\n        </div>\r\n        <Link to=\"/scheduler/confirm\">\r\n          <div className=\"ui animated basic blue button\" tabIndex=\"0\" onClick={this.handleClick}>\r\n            <div className=\"visible content\">Confirm Time</div>\r\n            <div className=\"hidden content\">\r\n              <i className=\"right arrow icon\"></i>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport DayPicker from 'react-day-picker';\r\nimport Card from './Card';\r\nimport 'react-day-picker/lib/style.css';\r\nimport './index.css';\r\n\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDayClick = this.handleDayClick.bind(this);\r\n    this.state = {\r\n      selectedDay: undefined,\r\n      times: []\r\n    };\r\n  }\r\n\r\n  handleDayClick(day, { selected }) {\r\n    if (selected) {\r\n      this.setState({ selectedDay: undefined });\r\n      this.props.setDate(undefined);\r\n    } else {\r\n      this.setState({selectedDay: day});\r\n      this.props.setDate(day);\r\n      this.listTimes();\r\n    }\r\n  }\r\n\r\n  listTimes() {\r\n    var timeList = []\r\n    for (var time = 0; time <= 19800000; time += 1800000) {\r\n      timeList.push(new Date(time));\r\n    }\r\n\r\n    this.setState({ times : timeList });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div className=\"ui segment\">\r\n          <div className=\"ui centered computer only two column very relaxed grid\">\r\n            <div className=\"center aligned column\">\r\n              <DayPicker\r\n                onDayClick={this.handleDayClick}\r\n                selectedDays={this.state.selectedDay}\r\n              />\r\n            </div>\r\n            <div className=\"column\">\r\n              {this.state.selectedDay ? (\r\n                <div>\r\n                  <p>You selected {this.state.selectedDay.toLocaleDateString()}</p>\r\n                  <ul>\r\n                    {this.state.times.map((time) => (\r\n                      <Card time = {time} date = {this.state.selectedDay} setTime = {this.props.setTime} />\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              ) : (\r\n                <p>Please select a day.</p>\r\n              )}\r\n            </div>\r\n            <div className=\"ui vertical divider\">\r\n              <i className=\"right arrow icon\"></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"ui centered mobile only stackable grid\">\r\n            <div className=\"center aligned column\">\r\n              <DayPicker\r\n                onDayClick={this.handleDayClick}\r\n                selectedDays={this.state.selectedDay}\r\n              />\r\n            </div>\r\n            <div className=\"center aligned column\">\r\n              {this.state.selectedDay ? (\r\n                <div>\r\n                  <p>You selected {this.state.selectedDay.toLocaleDateString()}</p><br/>\r\n                  <div className=\"ui center aligned grid\">\r\n                    {this.state.times.map((time) => (\r\n                      <Card time = {time} date = {this.state.selectedDay} setTime = {this.props.setTime} />\r\n                    ))}\r\n                  </div><br/><br/>\r\n                </div>\r\n              ) : (\r\n                <div><p>Please select a day.</p><br/></div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Confirm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.submit = this.submit.bind(this);\r\n    this.setEvent = this.setEvent.bind(this);\r\n    this.state = {\r\n      name: undefined,\r\n      email: undefined,\r\n      event: undefined,\r\n      duration: undefined,\r\n      location: undefined\r\n    }\r\n    if (this.props.date) {\r\n      this.state = {\r\n        date : new Date(this.props.date.getTime() + this.props.time.getTime()),\r\n      }\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    if (this.state.event) {\r\n      alert(\"Event: \" + this.state.event + \" added!\");\r\n    }\r\n  }\r\n\r\n  setEvent(e) {\r\n    this.setState({ event: e.target.value });\r\n    console.log(this.state.event);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.props.date ? (\r\n          <div className=\"ui centered raised card\">\r\n            <div className=\"center aligned content\">\r\n              <br/>\r\n              <div className=\"header\">\r\n                <p>{this.state.date.toLocaleString()}</p><br/>\r\n              </div>\r\n              <div className=\"center aligned description\">\r\n                <div className=\"ui form\">\r\n                  <div className=\"ui fluid labeled input\">\r\n                    <label className=\"ui label\">Name:</label>\r\n                    <input type=\"text\"/>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"ui fluid labeled input\">\r\n                    <label className=\"ui label\">Email:</label>\r\n                    <input type=\"text\"/>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"ui fluid labeled input\">\r\n                    <label className=\"ui label\">Event:</label>\r\n                    <input type=\"text\" onChange={ this.setEvent }/>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"ui fluid right labeled input\">\r\n                    <label className=\"ui label\">Duration:</label>\r\n                    <input type=\"number\"/>\r\n                    <div className=\"ui basic label\">\r\n                      minutes\r\n                    </div>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"ui fluid labeled input\">\r\n                    <label className=\"ui label\">Location:</label>\r\n                    <input type=\"text\"/>\r\n                  </div>\r\n                  <br/><br/>\r\n                </div>\r\n\r\n              </div>\r\n              <div className=\"center aligned extra content\">\r\n                <Link to=\"/scheduler\">\r\n                  <div className=\"ui animated basic red button\" tabIndex=\"0\">\r\n                    <div className=\"visible content\">Cancel</div>\r\n                    <div className=\"hidden content\">\r\n                      <i className=\"left arrow icon\"></i>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n                <div className=\"ui animated basic green button\" tabIndex=\"0\" onClick={this.submit}>\r\n                  <div className=\"visible content\">Confirm</div>\r\n                  <div className=\"hidden content\">\r\n                    <i className=\"right arrow icon\"></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <br/>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"ui centered raised card\">\r\n            <div className=\"center aligned content\">\r\n              <p>No chosen date/time.</p>\r\n              <Link to=\"/scheduler\">\r\n                <div className=\"ui animated basic red button\" tabIndex=\"0\">\r\n                  <div className=\"visible content\">Return to Calendar</div>\r\n                  <div className=\"hidden content\">\r\n                    <i className=\"left arrow icon\"></i>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport 'react-day-picker/lib/style.css';\r\nimport Calendar from './Calendar';\r\nimport Confirm from './Confirm';\r\nimport './index.css';\r\n\r\nexport default class Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setDate = this.setDate.bind(this);\r\n    this.setTime = this.setTime.bind(this);\r\n    this.state = {\r\n      date : undefined,\r\n      time : undefined\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.state.date);\r\n    return (\r\n      <Router>\r\n        <div>\r\n          {/* A <Switch> looks through its children <Route>s and\r\n          renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/scheduler/confirm\">\r\n              <Confirm date = {this.state.date} time = {this.state.time}/>\r\n            </Route>\r\n            <Route path=\"/scheduler\">\r\n              <Calendar setDate = {this.setDate} setTime = {this.setTime}/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  setDate(selectedDate) {\r\n    this.setState({date : selectedDate});\r\n  }\r\n\r\n  setTime(selectedTime) {\r\n    this.setState({time : selectedTime});\r\n  }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Dashboard from './Dashboard';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}